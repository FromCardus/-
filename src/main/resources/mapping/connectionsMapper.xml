<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="extractor.DAO.mapper.connectionsMapper">
  <resultMap id="BaseResultMap" type="extractor.model.connections">
    <id column="idconnections" jdbcType="INTEGER" property="idconnections" />
    <result column="connectionType" jdbcType="VARCHAR" property="connectiontype" />
    <result column="startcomponentID" jdbcType="INTEGER" property="startcomponentid" />
    <result column="startinterface" jdbcType="VARCHAR" property="startinterface" />
    <result column="endcomponentID" jdbcType="INTEGER" property="endcomponentid" />
    <result column="endinterface" jdbcType="VARCHAR" property="endinterface" />
  </resultMap>
  <sql id="Base_Column_List">
    idconnections, connectionType, startcomponentID, startinterface, endcomponentID, 
    endinterface
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from connections
    where idconnections = #{idconnections,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from connections
    where idconnections = #{idconnections,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="extractor.model.connections">
    insert into connections (idconnections, connectionType, startcomponentID, 
      startinterface, endcomponentID, endinterface
      )
    values (#{idconnections,jdbcType=INTEGER}, #{connectiontype,jdbcType=VARCHAR}, #{startcomponentid,jdbcType=INTEGER}, 
      #{startinterface,jdbcType=VARCHAR}, #{endcomponentid,jdbcType=INTEGER}, #{endinterface,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="extractor.model.connections">
    insert into connections
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="idconnections != null">
        idconnections,
      </if>
      <if test="connectiontype != null">
        connectionType,
      </if>
      <if test="startcomponentid != null">
        startcomponentID,
      </if>
      <if test="startinterface != null">
        startinterface,
      </if>
      <if test="endcomponentid != null">
        endcomponentID,
      </if>
      <if test="endinterface != null">
        endinterface,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="idconnections != null">
        #{idconnections,jdbcType=INTEGER},
      </if>
      <if test="connectiontype != null">
        #{connectiontype,jdbcType=VARCHAR},
      </if>
      <if test="startcomponentid != null">
        #{startcomponentid,jdbcType=INTEGER},
      </if>
      <if test="startinterface != null">
        #{startinterface,jdbcType=VARCHAR},
      </if>
      <if test="endcomponentid != null">
        #{endcomponentid,jdbcType=INTEGER},
      </if>
      <if test="endinterface != null">
        #{endinterface,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="extractor.model.connections">
    update connections
    <set>
      <if test="connectiontype != null">
        connectionType = #{connectiontype,jdbcType=VARCHAR},
      </if>
      <if test="startcomponentid != null">
        startcomponentID = #{startcomponentid,jdbcType=INTEGER},
      </if>
      <if test="startinterface != null">
        startinterface = #{startinterface,jdbcType=VARCHAR},
      </if>
      <if test="endcomponentid != null">
        endcomponentID = #{endcomponentid,jdbcType=INTEGER},
      </if>
      <if test="endinterface != null">
        endinterface = #{endinterface,jdbcType=VARCHAR},
      </if>
    </set>
    where idconnections = #{idconnections,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="extractor.model.connections">
    update connections
    set connectionType = #{connectiontype,jdbcType=VARCHAR},
      startcomponentID = #{startcomponentid,jdbcType=INTEGER},
      startinterface = #{startinterface,jdbcType=VARCHAR},
      endcomponentID = #{endcomponentid,jdbcType=INTEGER},
      endinterface = #{endinterface,jdbcType=VARCHAR}
    where idconnections = #{idconnections,jdbcType=INTEGER}
  </update>
</mapper>